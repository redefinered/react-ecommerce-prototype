{"ast":null,"code":"import { takeLatest, put, call } from 'redux-saga/effects';\nimport { Types, Creators } from 'modules/ducks/shop/shop.actions';\nimport { firestore, convertCollectionsSnapshotToMap } from 'firebase-client/firebase.utils';\nexport function* fetchCollectionsRequest() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(Creators.fetchCollectionsSuccess({\n      collections: collectionsMap\n    }));\n  } catch (error) {\n    yield put(Creators.fetchCollectionsFailure(error.message));\n  }\n}\nexport default function* shopSagas() {\n  yield takeLatest(Types.FETCH_COLLECTIONS, fetchCollectionsRequest);\n}","map":{"version":3,"sources":["/Users/reddeguzman/Code/crwn-clothing-ecommerce-react-prototype/client/src/modules/sagas/shop.sagas.js"],"names":["takeLatest","put","call","Types","Creators","firestore","convertCollectionsSnapshotToMap","fetchCollectionsRequest","collectionRef","collection","snapshot","get","collectionsMap","fetchCollectionsSuccess","collections","error","fetchCollectionsFailure","message","shopSagas","FETCH_COLLECTIONS"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,QAAsC,oBAAtC;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,iCAAhC;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,gCAA3D;AAEA,OAAO,UAAUC,uBAAV,GAAoC;AACzC,MAAI;AACF,UAAMC,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMV,IAAI,CAACI,+BAAD,EAAkCI,QAAlC,CAAjC;AACA,UAAMT,GAAG,CAACG,QAAQ,CAACS,uBAAT,CAAiC;AAAEC,MAAAA,WAAW,EAAEF;AAAf,KAAjC,CAAD,CAAT;AACD,GALD,CAKE,OAAOG,KAAP,EAAc;AACd,UAAMd,GAAG,CAACG,QAAQ,CAACY,uBAAT,CAAiCD,KAAK,CAACE,OAAvC,CAAD,CAAT;AACD;AACF;AAED,eAAe,UAAUC,SAAV,GAAsB;AACnC,QAAMlB,UAAU,CAACG,KAAK,CAACgB,iBAAP,EAA0BZ,uBAA1B,CAAhB;AACD","sourcesContent":["import { takeLatest, put, call } from 'redux-saga/effects';\nimport { Types, Creators } from 'modules/ducks/shop/shop.actions';\nimport { firestore, convertCollectionsSnapshotToMap } from 'firebase-client/firebase.utils';\n\nexport function* fetchCollectionsRequest() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(Creators.fetchCollectionsSuccess({ collections: collectionsMap }));\n  } catch (error) {\n    yield put(Creators.fetchCollectionsFailure(error.message));\n  }\n}\n\nexport default function* shopSagas() {\n  yield takeLatest(Types.FETCH_COLLECTIONS, fetchCollectionsRequest);\n}\n"]},"metadata":{},"sourceType":"module"}