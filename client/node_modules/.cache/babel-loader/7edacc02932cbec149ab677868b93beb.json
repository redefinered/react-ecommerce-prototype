{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist';\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './root.reducer';\nimport rootSaga from 'modules/sagas/root.saga';\nconst logger = createLogger({\n  collapsed: true\n});\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware]; // makes middlewares scalable\n\nif (process.env.NODE_ENV !== 'production') {\n  middlewares.push(logger);\n} // export default createStore(rootReducer, applyMiddleware(logger)); // for only one middleware\n\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\nsagaMiddleware.run(rootSaga);\nexport const persistor = persistStore(store);","map":{"version":3,"sources":["/Users/reddeguzman/Code/crwn-clothing-ecommerce-react-prototype/src/modules/store.js"],"names":["createStore","applyMiddleware","persistStore","createLogger","createSagaMiddleware","rootReducer","rootSaga","logger","collapsed","sagaMiddleware","middlewares","process","env","NODE_ENV","push","store","run","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AAEA,OAAOC,QAAP,MAAqB,yBAArB;AAEA,MAAMC,MAAM,GAAGJ,YAAY,CAAC;AAAEK,EAAAA,SAAS,EAAE;AAAb,CAAD,CAA3B;AAEA,MAAMC,cAAc,GAAGL,oBAAoB,EAA3C;AAEA,MAAMM,WAAW,GAAG,CAACD,cAAD,CAApB,C,CAAsC;;AAEtC,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCH,EAAAA,WAAW,CAACI,IAAZ,CAAiBP,MAAjB;AACD,C,CAED;;;AAEA,OAAO,MAAMQ,KAAK,GAAGf,WAAW,CAACK,WAAD,EAAcJ,eAAe,CAAC,GAAGS,WAAJ,CAA7B,CAAzB;AAEPD,cAAc,CAACO,GAAf,CAAmBV,QAAnB;AAEA,OAAO,MAAMW,SAAS,GAAGf,YAAY,CAACa,KAAD,CAA9B","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist';\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './root.reducer';\n\nimport rootSaga from 'modules/sagas/root.saga';\n\nconst logger = createLogger({ collapsed: true });\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware]; // makes middlewares scalable\n\nif (process.env.NODE_ENV !== 'production') {\n  middlewares.push(logger);\n}\n\n// export default createStore(rootReducer, applyMiddleware(logger)); // for only one middleware\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nsagaMiddleware.run(rootSaga);\n\nexport const persistor = persistStore(store);\n"]},"metadata":{},"sourceType":"module"}