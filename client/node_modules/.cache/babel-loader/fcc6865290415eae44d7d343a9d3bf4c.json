{"ast":null,"code":"import _objectSpread from \"/Users/reddeguzman/Code/crwn-clothing-ecommerce-react-prototype/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { takeLatest, put, call } from 'redux-saga/effects';\nimport { Types, Creators } from 'modules/ducks/user/user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from 'firebase-client/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(Creators.signInSuccess(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data())));\n  } catch (error) {\n    yield put(Creators.signInFailure(error));\n  }\n}\nexport function* signInWithGoogleRequest() {\n  try {\n    const _yield$auth$signInWit = yield auth.signInWithPopup(googleProvider),\n          user = _yield$auth$signInWit.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(Creators.signInFailure(error));\n  }\n}\nexport function* signInWithEmailRequest(action) {\n  const _action$data = action.data,\n        email = _action$data.email,\n        password = _action$data.password;\n  console.log('user', email);\n\n  try {\n    const _yield$auth$signInWit2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _yield$auth$signInWit2.user;\n\n    console.log('user', user);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(Creators.signInFailure(error));\n  }\n}\nexport function* checkUserSessionRequest() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(Creators.signInFailure(error));\n  }\n}\nexport function* signOutRequest() {\n  try {\n    yield auth.signOut();\n    yield put(Creators.signOutSuccess());\n  } catch (error) {\n    yield put(Creators.signOutFailure(error));\n  }\n}\nexport function* userSagas() {\n  yield takeLatest(Types.GOOGLE_SIGN_IN, signInWithGoogleRequest);\n  yield takeLatest(Types.EMAIL_SIGN_IN, signInWithEmailRequest);\n  yield takeLatest(Types.CHECK_USER_SESSION, checkUserSessionRequest);\n  yield takeLatest(Types.SIGN_OUT, signOutRequest);\n}","map":{"version":3,"sources":["/Users/reddeguzman/Code/crwn-clothing-ecommerce-react-prototype/src/modules/sagas/user.sagas.js"],"names":["takeLatest","put","call","Types","Creators","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","signInSuccess","id","data","error","signInFailure","signInWithGoogleRequest","signInWithPopup","user","signInWithEmailRequest","action","email","password","console","log","signInWithEmailAndPassword","checkUserSessionRequest","signOutRequest","signOut","signOutSuccess","signOutFailure","userSagas","GOOGLE_SIGN_IN","EMAIL_SIGN_IN","CHECK_USER_SESSION","SIGN_OUT"],"mappings":"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","sourcesContent":["import { takeLatest, put, call } from 'redux-saga/effects';\nimport { Types, Creators } from 'modules/ducks/user/user.actions';\n\nimport {\n  auth,\n  googleProvider,\n  createUserProfileDocument,\n  getCurrentUser\n} from 'firebase-client/firebase.utils';\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(Creators.signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n  } catch (error) {\n    yield put(Creators.signInFailure(error));\n  }\n}\n\nexport function* signInWithGoogleRequest() {\n  try {\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(Creators.signInFailure(error));\n  }\n}\n\nexport function* signInWithEmailRequest(action) {\n  const { email, password } = action.data;\n  console.log('user', email);\n  try {\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    console.log('user', user);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(Creators.signInFailure(error));\n  }\n}\n\nexport function* checkUserSessionRequest() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(Creators.signInFailure(error));\n  }\n}\n\nexport function* signOutRequest() {\n  try {\n    yield auth.signOut();\n    yield put(Creators.signOutSuccess());\n  } catch (error) {\n    yield put(Creators.signOutFailure(error));\n  }\n}\n\nexport function* userSagas() {\n  yield takeLatest(Types.GOOGLE_SIGN_IN, signInWithGoogleRequest);\n  yield takeLatest(Types.EMAIL_SIGN_IN, signInWithEmailRequest);\n  yield takeLatest(Types.CHECK_USER_SESSION, checkUserSessionRequest);\n  yield takeLatest(Types.SIGN_OUT, signOutRequest);\n}\n"]},"metadata":{},"sourceType":"module"}